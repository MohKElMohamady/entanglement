// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: proto/solvay.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SolvayServiceClient is the client API for SolvayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolvayServiceClient interface {
	GetConferencesForPhysicists(ctx context.Context, opts ...grpc.CallOption) (SolvayService_GetConferencesForPhysicistsClient, error)
}

type solvayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSolvayServiceClient(cc grpc.ClientConnInterface) SolvayServiceClient {
	return &solvayServiceClient{cc}
}

func (c *solvayServiceClient) GetConferencesForPhysicists(ctx context.Context, opts ...grpc.CallOption) (SolvayService_GetConferencesForPhysicistsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SolvayService_ServiceDesc.Streams[0], "/solvay.SolvayService/GetConferencesForPhysicists", opts...)
	if err != nil {
		return nil, err
	}
	x := &solvayServiceGetConferencesForPhysicistsClient{stream}
	return x, nil
}

type SolvayService_GetConferencesForPhysicistsClient interface {
	Send(*PhysicistInConference) error
	CloseAndRecv() (*DesignatedConferences, error)
	grpc.ClientStream
}

type solvayServiceGetConferencesForPhysicistsClient struct {
	grpc.ClientStream
}

func (x *solvayServiceGetConferencesForPhysicistsClient) Send(m *PhysicistInConference) error {
	return x.ClientStream.SendMsg(m)
}

func (x *solvayServiceGetConferencesForPhysicistsClient) CloseAndRecv() (*DesignatedConferences, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DesignatedConferences)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SolvayServiceServer is the server API for SolvayService service.
// All implementations must embed UnimplementedSolvayServiceServer
// for forward compatibility
type SolvayServiceServer interface {
	GetConferencesForPhysicists(SolvayService_GetConferencesForPhysicistsServer) error
	mustEmbedUnimplementedSolvayServiceServer()
}

// UnimplementedSolvayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSolvayServiceServer struct {
}

func (UnimplementedSolvayServiceServer) GetConferencesForPhysicists(SolvayService_GetConferencesForPhysicistsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConferencesForPhysicists not implemented")
}
func (UnimplementedSolvayServiceServer) mustEmbedUnimplementedSolvayServiceServer() {}

// UnsafeSolvayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolvayServiceServer will
// result in compilation errors.
type UnsafeSolvayServiceServer interface {
	mustEmbedUnimplementedSolvayServiceServer()
}

func RegisterSolvayServiceServer(s grpc.ServiceRegistrar, srv SolvayServiceServer) {
	s.RegisterService(&SolvayService_ServiceDesc, srv)
}

func _SolvayService_GetConferencesForPhysicists_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SolvayServiceServer).GetConferencesForPhysicists(&solvayServiceGetConferencesForPhysicistsServer{stream})
}

type SolvayService_GetConferencesForPhysicistsServer interface {
	SendAndClose(*DesignatedConferences) error
	Recv() (*PhysicistInConference, error)
	grpc.ServerStream
}

type solvayServiceGetConferencesForPhysicistsServer struct {
	grpc.ServerStream
}

func (x *solvayServiceGetConferencesForPhysicistsServer) SendAndClose(m *DesignatedConferences) error {
	return x.ServerStream.SendMsg(m)
}

func (x *solvayServiceGetConferencesForPhysicistsServer) Recv() (*PhysicistInConference, error) {
	m := new(PhysicistInConference)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SolvayService_ServiceDesc is the grpc.ServiceDesc for SolvayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SolvayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "solvay.SolvayService",
	HandlerType: (*SolvayServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetConferencesForPhysicists",
			Handler:       _SolvayService_GetConferencesForPhysicists_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/solvay.proto",
}
